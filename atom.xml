<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alvin Huang&#39;s Blog</title>
  
  <subtitle>Record my program career.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huanguolin.github.io/"/>
  <updated>2017-12-26T14:35:19.330Z</updated>
  <id>https://huanguolin.github.io/</id>
  
  <author>
    <name>Alvin Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017总结.md</title>
    <link href="https://huanguolin.github.io/2017/12/25/2017%E6%80%BB%E7%BB%93-md/"/>
    <id>https://huanguolin.github.io/2017/12/25/2017总结-md/</id>
    <published>2017-12-25T13:37:48.000Z</published>
    <updated>2017-12-26T14:35:19.330Z</updated>
    
    <content type="html"><![CDATA[<p>眼看2017就要过去了。可回望这一年，一时间，竟没想到成就了什么事情。好似一直碌碌无为？恩，也不要这么消极！先浮上心头的是几件不了了之的事情，细细回想，却还有些可圈可点的事情。对这一年做一个客观的分析，能更好的认识自己，以求扬长避短。</p><a id="more"></a><p>下面就来列举今年做的一些事情。</p><h3 id="先列做成了的："><a href="#先列做成了的：" class="headerlink" title="先列做成了的："></a>先列做成了的：</h3><ol><li>前端基于Vue的技术栈基本掌握了。Vue + Vue-router + Vuex + Webpack 在实际项目中深入使用了。</li><li>自己第一个五脏俱全的开源小项目：<a href="https://github.com/huanguolin/repeat-runner" target="_blank" rel="noopener">repeat-runner</a>，在这方面迈出自己的第一步，虽然几乎只有自己在使用。这个项目里， 首次尝试了 Unit test、CI、eslint，并第一次正经的写了一个 README。</li><li>参加了百度前端技术学院春季练习：<a href="https://github.com/huanguolin/ife2017spring-prac" target="_blank" rel="noopener">ife2017spring-prac</a>，虽然做的题目不多，但是比较用心，也小有收获（恩，后面可以写一篇文章聊聊js中如何实现传统的面向对象）。</li><li>用 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 搭建了自己的静态博客 <a href="http://alvinlearn.top/" target="_blank" rel="noopener">alvinlearn.top</a>， 后面要鞭策自己多写了。</li><li>工作中把项目里 Storage 模块做了扩展和重构，后续希望做更多的拓展（可以乘机提高自己的java水平）。</li><li>工作中还把之前很糟糕的一个 C 工程整理了一遍，把 Linux/Android 编译、做包的部分重写了。完成后用起来顺手，心情也顺畅！真的，我对代码是有强迫症的^_^</li><li>今年夏天搬家后就开始第二次发起对《SICP》的冲锋，虽然后面还有两章没有完成。但是已经收获满满。这本书，光看不做题是不行的，这一次看过的章节，绝大部分习题都完成了：<a href="https://github.com/huanguolin/sicp-solutions" target="_blank" rel="noopener">sicp-solutions</a>。明年我会继续后面的章节，并补充前面的笔记，以及未完成的习题。另外还会写几篇相关的文章，还在构思。</li></ol><h3 id="再举流产的几个事情："><a href="#再举流产的几个事情：" class="headerlink" title="再举流产的几个事情："></a>再举流产的几个事情：</h3><ol><li>计划阅读 Vue 源码，由于工作和一些原因，拖了几回，没了。</li><li>计划写一个 VSCode 插件，方便看 git log 记录（比现有的方便），结果按部就班学习基础知识，断了几次，放弃了。</li><li>开了一个叫 <a href="https://github.com/huanguolin/es-shim" target="_blank" rel="noopener">es-shim</a> 的 repo，想着通过写 shim 来深入学习 es5/6，结果没写多久也放弃了。</li><li>前两个月计划把 java 系统深入的学习一下，结果也没有实现。</li><li>4月份的时候，公司办尤克里里社团，心头一热，买了把琴，结果没坚持3个周，就束之高阁了。</li></ol><h3 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h3><p>为什么能做成，又为什么做不成？</p><p>做成的几件事情有的关键特质：</p><ol><li>公司业务需求，有强制力</li><li>来源于公司业务需求，顺水推舟</li><li>小题形式的挑战，目标精确，有对比，易于获得成就感</li><li>目标明确，易于达成</li><li>公司业务需求，有强制力</li><li>公司业务需求，有强制力</li><li>目标明确，练习题能给人带来成就感，另外实施的过程中注重一气呵成，没有太多的拖延；出现疲倦的时候，也坚持推进</li></ol><p>总结来看，主要是：<br>a. 强制因素<br>b. 目标清晰，阶段划分合理，易于获得成就感<br>c. 一鼓作气<br>d. 坚持</p><p>再看看失败的几件事：</p><ol><li>注意力分散，没有直奔主题（当时觉得没有能方便查看 git log 的工具）</li><li>总是想准备充分，结果把热心给晾凉了</li><li>也是有一些注意力分散，老想把辅助设施搞好，另外坚持欠缺</li><li>一样，犹犹豫豫，有了想法迟迟没动手</li><li>三分钟热度，没能持之以恒，初期也不容易获得成就感</li></ol><p>总结了，就是：<br>a. 拖沓，执行力弱<br>b. 总是被小事分心，搞不清主次，不分先后，幻想能做好所有事情<br>c. 没有清楚的认识到：事情不可能一蹴而就，很多东西都需要不断完善，尤其是写代码<br>d. 没有一个良性的计划：目标太高，没有细分为小目标<br>e. 懒惰，会把希望寄托于明天</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>以上的分析可以看出来，提高自己产出率的方法有：</p><ol><li>“骑虎难下”，让自己认识到有些事情必须要做，迟早要做，不做毁半生（要让自己清醒）</li><li>目标合理分段，逐步实现，不断完善</li><li>牢记出发点，提醒自己分析轻重缓急</li><li>一鼓作气，全力以赴（看准了，不犹豫）。不能懈怠，以免失去“惯性”</li><li>从现在做起。坚持得了今天，明天才有希望</li><li>设立奖惩机制，适当激励自己^_^</li></ol><p>恩，找到自己的薄弱之处，有意识的去改正。另外采取合理的方法能有效避免懈怠（过程无趣，找不到成就感时容易发生）、遭受挫折（有时候是自找）。</p><p>加油，2018！希望自己能在技术和心智上更上一层楼！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;眼看2017就要过去了。可回望这一年，一时间，竟没想到成就了什么事情。好似一直碌碌无为？恩，也不要这么消极！先浮上心头的是几件不了了之的事情，细细回想，却还有些可圈可点的事情。对这一年做一个客观的分析，能更好的认识自己，以求扬长避短。&lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="https://huanguolin.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="https://huanguolin.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Android.mk编写建议</title>
    <link href="https://huanguolin.github.io/2017/06/26/Android-mk%E7%BC%96%E5%86%99%E5%BB%BA%E8%AE%AE/"/>
    <id>https://huanguolin.github.io/2017/06/26/Android-mk编写建议/</id>
    <published>2017-06-26T00:11:58.000Z</published>
    <updated>2017-12-18T13:36:10.727Z</updated>
    
    <content type="html"><![CDATA[<p>最近要将一个 C/C++ 程序移植到 Android 平台，所以学习了 <a href="https://developer.android.com/ndk/guides/index.html" target="_blank" rel="noopener">NDK</a> 的基本使用。其中就有 <a href="https://developer.android.com/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> 的编写。这里记录下我个人推荐的一个编写形式，这种形式推崇使用 Android.mk 的导出功能，使得模块依赖的处理更加简洁便利。本文主要分三个部分，第一部分描述 Android.mk 的基本结构，通用格式；第二部分通过举例描述推荐写法，并与普通写法作对比；最后一部分做简单的总结。</p><a id="more"></a><h2 id="1-通用基本格式"><a href="#1-通用基本格式" class="headerlink" title="1. 通用基本格式"></a>1. 通用基本格式</h2><p>这里是一个通用格式，大部分的 Android.mk 都可以按照这个格式来编写的。我所说的推荐格式当然也是符合这个格式的，当然要遵守人家的标准嘛 O(∩_∩)O~~</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 必选项，都需要填写。此部分定义了模块必备信息</span></div><div class="line">LOCAL_PATH                  := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE                := (name)</div><div class="line">LOCAL_SRC_FILES             := (source file list)</div><div class="line"></div><div class="line"><span class="comment"># 可选项，依据需要填写。此部分是模块的依赖项</span></div><div class="line">LOCAL_C_INCLUDES            := [header file path]</div><div class="line">LOCAL_CFLAGS                := [c flags]</div><div class="line">LOCAL_STATIC_LIBRARIES      := [depended module name] </div><div class="line">LOCAL_SHARED_LIBRARIES      := [depended module name]</div><div class="line">LOCAL_LDLIBS                := [ld libs]</div><div class="line">LOCAL_LDFLAGS               := [ld flags]</div><div class="line"></div><div class="line"><span class="comment"># 可选项，依据需要填写。此部分是导出项，我们要利用的就是这( ^_^ )</span></div><div class="line">LOCAL_EXPORT_C_INCLUDES     := [header file path] </div><div class="line">LOCAL_EXPORT_CFLAGS         := [c flags]</div><div class="line">LOCAL_EXPORT_LDLIBS         := [ld libs] </div><div class="line">LOCAL_EXPORT_LDFLAGS        := [ld flags]</div><div class="line"></div><div class="line"><span class="comment"># 必选项，但只能选下列之一。此部分定义了模块的编译输出</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span> </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span> </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span> </div><div class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_STATIC_LIBRARY)</span></div></pre></td></tr></table></figure><p>说明：<br>(1) <code>ndk-build</code> 会自动推导头文件，源文件所在的路径都将作为头文件搜索路径，可以使用 <code>LOCAL_C_INCLUDES</code> 添加其他路径；<br>(2) <code>*_LDLIBS</code> 填写示例：<code>-lz –ldl</code>。<strong>注意</strong>：<code>-lpthread</code>,<code>–lm</code>,<code>–lrt</code>不需要填写，Android 下会自动链接；<br>(3) <code>LOCAL_SRC_FILES</code> 默认从<code>$(LOCAL_PATH)</code>开始，通常只需列出源文件，如 <code>foo.c main.c</code>; 在使用预编译时要写对应的库名，如 <code>libfoo.a</code> 或者 <code>libfoo.so</code>；<br>(4) 一个 Android.mk 可以含多个模块。一个模块的内容从 <code>include $(CLEAR_VARS)</code> 开始，到定义编译输出结束。所以一个模块的内容务必夹在二者之间。此时，以上通用格式的第一行内容务必作为整个文件的开始,且后续不需要再写它；<br>(5) Android.mk 是一种形式化的 makefile。因而也可以自定义变量，使用 makefile 的内置函数等，这些不受以上说明约束，不过最好参考 <a href="https://developer.android.com/ndk/guides/android_mk.html#var" target="_blank" rel="noopener">NDK 的建议</a>。</p><h2 id="2-推荐写法"><a href="#2-推荐写法" class="headerlink" title="2. 推荐写法"></a>2. 推荐写法</h2><p>举例说明：foo 模块依赖 bar 模块,那么至少 foo 要引用 bar 的头文件, 现在假设两个模块目录结构如下：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-src</div><div class="line">    -lib</div><div class="line">        -foo</div><div class="line">            foo.c</div><div class="line">            foo.h</div><div class="line">            Android.mk</div><div class="line">        -bar</div><div class="line">            bar.c</div><div class="line">            bar.h</div><div class="line">            Android.mk</div></pre></td></tr></table></figure><h3 id="1-普通写法"><a href="#1-普通写法" class="headerlink" title="1) 普通写法"></a>1) 普通写法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># foo 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := foo</div><div class="line">LOCAL_SRC_FILES         := foo.c</div><div class="line"><span class="comment"># ** 差异 ***</span></div><div class="line">LOCAL_C_INCLUDES        := <span class="variable">$(LOCAL_PATH)</span>/../bar</div><div class="line">LOCAL_STATIC_LIBRARIES  := bar </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span> </div><div class="line"></div><div class="line"><span class="comment"># bar 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := bar</div><div class="line">LOCAL_SRC_FILES         := bar.c</div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span></div></pre></td></tr></table></figure><h3 id="2-推荐写法-1"><a href="#2-推荐写法-1" class="headerlink" title="2) 推荐写法"></a>2) 推荐写法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># foo 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := foo</div><div class="line">LOCAL_SRC_FILES         := foo.c</div><div class="line">LOCAL_STATIC_LIBRARIES  := bar</div><div class="line">LOCAL_EXPORT_C_INCLUDES:= <span class="variable">$(LOCAL_PATH)</span>   </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span> </div><div class="line"></div><div class="line"><span class="comment"># bar 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := bar</div><div class="line">LOCAL_SRC_FILES         := bar.c</div><div class="line"><span class="comment"># ** 差异 ***</span></div><div class="line">LOCAL_EXPORT_C_INCLUDES:= <span class="variable">$(LOCAL_PATH)</span>  </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span></div></pre></td></tr></table></figure><p>两种写法的差异是：把 foo 依赖于 bar 的头文件从 foo 自身导入变成了 bar 自行导出。貌似这点改进也没带来什么便利~~。 从这个简单的例子看确实如此。但是想想，引用 bar 的模块比较多的时候，按照普通写法，每个里面都要写引用 bar 的头文件，而用推荐的写法中，只需要在 bar 中写一次，以后不管有多少模块引用它，都不用再多写了。在模块多，引用复杂的项目中，这一点能带来很大便捷！</p><p>推荐写法是 “高内聚，低耦合” 的。因为被依赖项把依赖于它的模块需要的东西都在 “隐藏” 在自己内部，把耦合仅仅体现于依赖引用上。如此引用的一方只需要写 “我” 需要 “你” 就好了，而不必再显示的写需要 “你” 的头文件，需要 “你” 要链接的系统库等等。   </p><p>另外说一点，写依赖项时，务必保持 “干净”。 即不要添加不需要的项。   </p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>编写 Android.mk 的原则：<br>(1)    保持内聚，简单引用。尽量使用导出功能。<br>(2)    不添加不必要的依赖，保持干净！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要将一个 C/C++ 程序移植到 Android 平台，所以学习了 &lt;a href=&quot;https://developer.android.com/ndk/guides/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NDK&lt;/a&gt; 的基本使用。其中就有 &lt;a href=&quot;https://developer.android.com/ndk/guides/android_mk.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android.mk&lt;/a&gt; 的编写。这里记录下我个人推荐的一个编写形式，这种形式推崇使用 Android.mk 的导出功能，使得模块依赖的处理更加简洁便利。本文主要分三个部分，第一部分描述 Android.mk 的基本结构，通用格式；第二部分通过举例描述推荐写法，并与普通写法作对比；最后一部分做简单的总结。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https://huanguolin.github.io/categories/Android/"/>
    
    
      <category term="Android.mk" scheme="https://huanguolin.github.io/tags/Android-mk/"/>
    
  </entry>
  
</feed>
