<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alvin Huang&#39;s Blog</title>
  <subtitle>Record my program career.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huanguolin.github.io/"/>
  <updated>2017-12-17T12:34:30.880Z</updated>
  <id>https://huanguolin.github.io/</id>
  
  <author>
    <name>Alvin Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android.mk编写建议</title>
    <link href="https://huanguolin.github.io/2017/06/26/Android-mk%E7%BC%96%E5%86%99%E5%BB%BA%E8%AE%AE/"/>
    <id>https://huanguolin.github.io/2017/06/26/Android-mk编写建议/</id>
    <published>2017-06-26T00:11:58.000Z</published>
    <updated>2017-12-17T12:34:30.880Z</updated>
    
    <content type="html"><![CDATA[<p>最近要将一个 C/C++ 程序移植到 Android 平台，所以学习了 <a href="https://developer.android.com/ndk/guides/index.html" target="_blank" rel="external">NDK</a> 的基本使用。其中就有 <a href="https://developer.android.com/ndk/guides/android_mk.html" target="_blank" rel="external">Android.mk</a> 的编写。这里记录下我个人推荐的一个编写形式，这种形式推崇使用 Android.mk 的导出功能，使得模块依赖的处理更加简洁便利。本文主要分三个部分，第一部分描述 Android.mk 的基本结构，通用格式；第二部分通过举例描述推荐写法，并与普通写法作对比；最后一部分做简单的总结。</p>
<h2 id="1-通用基本格式"><a href="#1-通用基本格式" class="headerlink" title="1. 通用基本格式"></a>1. 通用基本格式</h2><p>这里是一个通用格式，大部分的 Android.mk 都可以按照这个格式来编写的。我所说的推荐格式当然也是符合这个格式的，当然要遵守人家的标准嘛 O(∩_∩)O~~</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 必选项，都需要填写。此部分定义了模块必备信息</span></div><div class="line">LOCAL_PATH                  := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE                := (name)</div><div class="line">LOCAL_SRC_FILES             := (source file list)</div><div class="line"></div><div class="line"><span class="comment"># 可选项，依据需要填写。此部分是模块的依赖项</span></div><div class="line">LOCAL_C_INCLUDES            := [header file path]</div><div class="line">LOCAL_CFLAGS                := [c flags]</div><div class="line">LOCAL_STATIC_LIBRARIES      := [depended module name] </div><div class="line">LOCAL_SHARED_LIBRARIES      := [depended module name]</div><div class="line">LOCAL_LDLIBS                := [ld libs]</div><div class="line">LOCAL_LDFLAGS               := [ld flags]</div><div class="line"></div><div class="line"><span class="comment"># 可选项，依据需要填写。此部分是导出项，我们要利用的就是这( ^_^ )</span></div><div class="line">LOCAL_EXPORT_C_INCLUDES     := [header file path] </div><div class="line">LOCAL_EXPORT_CFLAGS         := [c flags]</div><div class="line">LOCAL_EXPORT_LDLIBS         := [ld libs] </div><div class="line">LOCAL_EXPORT_LDFLAGS        := [ld flags]</div><div class="line"></div><div class="line"><span class="comment"># 必选项，但只能选下列之一。此部分定义了模块的编译输出</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span> </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span> </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span> </div><div class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_SHARED_LIBRARY)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(PREBUILT_STATIC_LIBRARY)</span></div></pre></td></tr></table></figure>
<p>说明：<br>(1) <code>ndk-build</code> 会自动推导头文件，源文件所在的路径都将作为头文件搜索路径，可以使用 <code>LOCAL_C_INCLUDES</code> 添加其他路径；<br>(2) <code>*_LDLIBS</code> 填写示例：<code>-lz –ldl</code>。<strong>注意</strong>：<code>-lpthread</code>,<code>–lm</code>,<code>–lrt</code>不需要填写，Android 下会自动链接；<br>(3) <code>LOCAL_SRC_FILES</code> 默认从<code>$(LOCAL_PATH)</code>开始，通常只需列出源文件，如 <code>foo.c main.c</code>; 在使用预编译时要写对应的库名，如 <code>libfoo.a</code> 或者 <code>libfoo.so</code>；<br>(4) 一个 Android.mk 可以含多个模块。一个模块的内容从 <code>include $(CLEAR_VARS)</code> 开始，到定义编译输出结束。所以一个模块的内容务必夹在二者之间。此时，以上通用格式的第一行内容务必作为整个文件的开始,且后续不需要再写它；<br>(5) Android.mk 是一种形式化的 makefile。因而也可以自定义变量，使用 makefile 的内置函数等，这些不受以上说明约束，不过最好参考 <a href="https://developer.android.com/ndk/guides/android_mk.html#var" target="_blank" rel="external">NDK 的建议</a>。</p>
<h2 id="2-推荐写法"><a href="#2-推荐写法" class="headerlink" title="2. 推荐写法"></a>2. 推荐写法</h2><p>举例说明：foo 模块依赖 bar 模块,那么至少 foo 要引用 bar 的头文件, 现在假设两个模块目录结构如下：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-src</div><div class="line">    -lib</div><div class="line">        -foo</div><div class="line">            foo.c</div><div class="line">            foo.h</div><div class="line">            Android.mk</div><div class="line">        -bar</div><div class="line">            bar.c</div><div class="line">            bar.h</div><div class="line">            Android.mk</div></pre></td></tr></table></figure>
<h3 id="1-普通写法"><a href="#1-普通写法" class="headerlink" title="1) 普通写法"></a>1) 普通写法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># foo 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := foo</div><div class="line">LOCAL_SRC_FILES         := foo.c</div><div class="line"><span class="comment"># ** 差异 ***</span></div><div class="line">LOCAL_C_INCLUDES        := <span class="variable">$(LOCAL_PATH)</span>/../bar</div><div class="line">LOCAL_STATIC_LIBRARIES  := bar </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span> </div><div class="line"></div><div class="line"><span class="comment"># bar 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := bar</div><div class="line">LOCAL_SRC_FILES         := bar.c</div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span></div></pre></td></tr></table></figure>
<h3 id="2-推荐写法-1"><a href="#2-推荐写法-1" class="headerlink" title="2) 推荐写法"></a>2) 推荐写法</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># foo 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := foo</div><div class="line">LOCAL_SRC_FILES         := foo.c</div><div class="line">LOCAL_STATIC_LIBRARIES  := bar</div><div class="line">LOCAL_EXPORT_C_INCLUDES	:= <span class="variable">$(LOCAL_PATH)</span>   </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_SHARED_LIBRARY)</span> </div><div class="line"></div><div class="line"><span class="comment"># bar 的 Android.mk</span></div><div class="line">LOCAL_PATH              := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></div><div class="line"><span class="keyword">include</span> <span class="variable">$(CLEAR_VARS)</span></div><div class="line">LOCAL_MODULE            := bar</div><div class="line">LOCAL_SRC_FILES         := bar.c</div><div class="line"><span class="comment"># ** 差异 ***</span></div><div class="line">LOCAL_EXPORT_C_INCLUDES	:= <span class="variable">$(LOCAL_PATH)</span>  </div><div class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_STATIC_LIBRARY)</span></div></pre></td></tr></table></figure>
<p>两种写法的差异是：把 foo 依赖于 bar 的头文件从 foo 自身导入变成了 bar 自行导出。貌似这点改进也没带来什么便利~~。 从这个简单的例子看确实如此。但是想想，引用 bar 的模块比较多的时候，按照普通写法，每个里面都要写引用 bar 的头文件，而用推荐的写法中，只需要在 bar 中写一次，以后不管有多少模块引用它，都不用再多写了。在模块多，引用复杂的项目中，这一点能带来很大便捷！</p>
<p>推荐写法是 “高内聚，低耦合” 的。因为被依赖项把依赖于它的模块需要的东西都在 “隐藏” 在自己内部，把耦合仅仅体现于依赖引用上。如此引用的一方只需要写 “我” 需要 “你” 就好了，而不必再显示的写需要 “你” 的头文件，需要 “你” 要链接的系统库等等。   </p>
<p>另外说一点，写依赖项时，务必保持 “干净”。 即不要添加不需要的项。   </p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>编写 Android.mk 的原则：<br>(1)    保持内聚，简单引用。尽量使用导出功能。<br>(2)    不添加不必要的依赖，保持干净！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近要将一个 C/C++ 程序移植到 Android 平台，所以学习了 &lt;a href=&quot;https://developer.android.com/ndk/guides/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NDK&lt;/a&gt; 
    
    </summary>
    
      <category term="Android" scheme="https://huanguolin.github.io/categories/Android/"/>
    
    
      <category term="Android.mk" scheme="https://huanguolin.github.io/tags/Android-mk/"/>
    
  </entry>
  
</feed>
